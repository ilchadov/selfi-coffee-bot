import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)
import os

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = "7869918197:AAEgtYUzbrh7ILFmnafMwDSlJi3XBeaAMrk"

# üëë ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [237810136, 5649376616]  # @cramirezz –∏ @vladislav_platitsyn

# üí∞ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_balances = {}

# ü™™ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    return user_id in ADMIN_IDS

# üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("‚òï –ö–æ—Ñ–µ", callback_data="coffee")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="recharge")],
    ]

    if is_admin(user_id):
        keyboard.append([InlineKeyboardButton("üë• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ", callback_data="admin_add")])
        keyboard.append([InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞", callback_data="admin_table")])
        keyboard.append([InlineKeyboardButton("üìâ –°–Ω—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="admin_leftovers")])
        keyboard.append([InlineKeyboardButton("üí∏ –°–±–æ—Ä –¥–∞–Ω–∏", callback_data="admin_notify")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    username = query.from_user.username or f"id{user_id}"

    if user_id not in user_balances:
        user_balances[user_id] = {"username": username, "balance": 0}

    action = query.data

    if action == "coffee":
        user_balances[user_id]["balance"] -= 50
        await query.edit_message_text(f"‚òï –ö–æ—Ñ–µ —Å–ø–∏—Å–∞–Ω ‚Äî –±–∞–ª–∞–Ω—Å: {user_balances[user_id]['balance']}‚ÇΩ")

    elif action == "balance":
        await query.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]['balance']}‚ÇΩ")

    elif action == "recharge":
        await query.edit_message_text("üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É: 2202 2036 0271 3023\n–ò –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É.")

    elif action == "admin_add" and is_admin(user_id):
        buttons = [
            [InlineKeyboardButton(u["username"], callback_data=f"add_{uid}")]
            for uid, u in user_balances.items()
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–ö–æ–º—É –ø–æ–ø–æ–ª–Ω–∏—Ç—å?", reply_markup=reply_markup)

    elif action.startswith("add_") and is_admin(user_id):
        target_id = int(action.split("_")[1])
        user_balances[target_id]["balance"] += 50
        await query.edit_message_text(
            f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ 50‚ÇΩ –¥–ª—è {user_balances[target_id]['username']}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balances[target_id]['balance']}‚ÇΩ"
        )

    elif action == "admin_table" and is_admin(user_id):
        text = "üìä –¢–∞–±–ª–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞:\n"
        for u in user_balances.values():
            text += f"@{u['username']}: {u['balance']}‚ÇΩ\n"
        await query.edit_message_text(text)

    elif action == "admin_leftovers" and is_admin(user_id):
        total_coffee = sum(
            abs(u["balance"] // 50) for u in user_balances.values() if u["balance"] < 0
        )
        await query.edit_message_text(f"‚òï –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∫–æ—Ñ–µ: {total_coffee} (–∑–µ—Ä–Ω–æ –∏ –º–æ–ª–æ–∫–æ)")

    elif action == "admin_notify" and is_admin(user_id):
        for uid, u in user_balances.items():
            if u["balance"] < 0:
                try:
                    await context.bot.send_message(
                        chat_id=uid,
                        text=f"üîî –ü—Ä–∏–≤–µ—Ç, @{u['username']}! –£ —Ç–µ–±—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–æ—Ñ–µ ‚Äî {u['balance']}‚ÇΩ. –ù–µ –∑–∞–±—É–¥—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å üôè"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è {u['username']}: {e}")
        await query.edit_message_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

# üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /start")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.initialize()
    await app.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
