import logging
import asyncio
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_IDS = [237810136, 123456789, 987654321]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –∞–¥–º–∏–Ω–æ–≤

# –ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
balances = {}

# –ö–Ω–æ–ø–∫–∏
def get_main_keyboard(is_admin=False):
    buttons = [
        [InlineKeyboardButton("‚òï –ö–æ—Ñ–µ", callback_data="coffee")],
        [InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="recharge_info")]
    ]
    if is_admin:
        buttons += [
            [InlineKeyboardButton("üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º—É-—Ç–æ", callback_data="admin_add")],
            [InlineKeyboardButton("üìä –¢–∞–±–ª–∏—Ü–∞", callback_data="admin_table")],
            [InlineKeyboardButton("üìâ –°–Ω—è—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", callback_data="admin_leftovers")],
            [InlineKeyboardButton("üí∏ –°–±–æ—Ä –¥–∞–Ω–∏", callback_data="admin_collect")]
        ]
    return InlineKeyboardMarkup(buttons)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_admin = user_id in ADMIN_IDS
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω–æ–≥–æ –±–æ—Ç–∞ ‚òï",
        reply_markup=get_main_keyboard(is_admin)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    is_admin = user_id in ADMIN_IDS

    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    if data == "coffee":
        balances[user_id] = balances.get(user_id, 0) - 50
        await query.edit_message_text(f"‚òï –°–ø–∏—Å–∞–Ω–æ 50‚ÇΩ. –í–∞—à –±–∞–ª–∞–Ω—Å: {balances[user_id]}‚ÇΩ", reply_markup=get_main_keyboard(is_admin))
    elif data == "balance":
        await query.edit_message_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balances.get(user_id, 0)}‚ÇΩ", reply_markup=get_main_keyboard(is_admin))
    elif data == "recharge_info":
        await query.edit_message_text("üí≥ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É 1234 5678 9000 0000 –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    elif data == "admin_table":
        text = "\n".join([f"{uid}: {bal}‚ÇΩ" for uid, bal in balances.items()]) or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        await query.edit_message_text(f"üìä –ë–∞–ª–∞–Ω—Å—ã:\n{text}")
    elif data == "admin_collect":
        for uid, bal in balances.items():
            if bal < 0:
                try:
                    await context.bot.send_message(uid, f"üí∏ –£ –≤–∞—Å –¥–æ–ª–≥ –∑–∞ –∫–æ—Ñ–µ: {bal}‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await query.edit_message_text("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    elif data == "admin_leftovers":
        count = sum(-bal // 50 for bal in balances.values() if bal < 0)
        await query.edit_message_text(f"üìâ –û—Å—Ç–∞—Ç–∫–∏ (–¥–æ–ª–≥–∏): {count} —á–∞—à–µ–∫ –∫–æ—Ñ–µ")
    elif data == "admin_add":
        await query.edit_message_text("–ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ. –í–≤–µ–¥–∏—Ç–µ /admin_add ID —Å—É–º–º–∞")

# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Ä—É—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
async def admin_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    try:
        uid = int(context.args[0])
        amount = int(context.args[1])
        balances[uid] = balances.get(uid, 0) + amount
        await update.message.reply_text(f"‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ {amount}‚ÇΩ –¥–ª—è {uid}")
    except:
        await update.message.reply_text("‚ùóÔ∏è–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_add ID –°–£–ú–ú–ê")

# –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")

# –ó–∞–ø—É—Å–∫
async def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin_add", admin_add))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
